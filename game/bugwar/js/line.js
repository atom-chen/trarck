(function () {    var Shape=yhge.renderer.canvas.shape.Shape;        var Line=yhge.core.Class(Shape,{        classname:"Line",                initialize:function(){            this._triangles=[];            this._lines=[];            this._froms=[];            this._to={x:0,y:0};            Line._super_.initialize.apply(this,arguments);        },        draw:function (context) {            if(this._dirtyPoint) {                this.updatePoints();            }            var len=this._triangles.length;                        if(len){                context.fillStyle=this._color;                context.beginPath();                context.moveTo(this._to.x,this._to.y);                for(var i=0;i<len;i++){                    var triangle=this._triangles[i];                    context.lineTo(triangle[0].x,triangle[0].y);                    context.lineTo(triangle[1].x,triangle[1].y);                    context.lineTo(this._to.x,this._to.y);                }                context.fill();            }        },        updatePoints:function () {            var to=this._to;            this._triangles=[];            for(var i=0,l=this._froms.length;i<l;i++){                var from=this._froms[i];                var dx=to.x-from.x,dy=to.y-from.y;                var d=Math.atan2(-dx,dy);                var sx=Math.cos(d) *10,                    sy=Math.sin(d) *10;                var x1=from.x+sx,y1=from.y+sy,                    x2=from.x-sx,y2=from.y-sy;                this._triangles.push([{x:x1,y:y1},{x:x2,y:y2}]);            }            this._dirtyPoint=false;        },        setTo:function (to) {            this._to=to;            this._dirtyPoint=true;        },        addPoint:function (from) {            for(var i=0,l=this._froms.length;i<l;i++){                if(this._froms[i].x==from.x && this._froms[i].y==from.y){                    return;                }            }            this._froms.push(from);        },        removePoint:function(from){            console.log("removePoint:",from.x,from.y,this._froms);            for(var i=0,l=this._froms.length;i<l;i++){                console.log(this._froms[i].x==from.x, this._froms[i].y==from.y)                 if(this._froms[i].x==from.x && this._froms[i].y==from.y){                     console.log("remove:",i)                     this._froms.splice(i,1);                     break;                 }            }        },        clear:function () {            this._froms=[];            this._triangles=[];        }    });    BugWar.Line=Line;})();
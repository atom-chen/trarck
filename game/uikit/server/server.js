var http=require("http"),    url=require("url"),    fs=require("fs"),    path=require("path");var EventEmitter=require('events').EventEmitter;var util = require('util');var mine=require("./mine");var serverDefaultConfig={	ContentType:"text/html"};var Server=function(port,host,webRoot,routeMaps,staticRouteMaps,config){	this._port=port;	this._host=host;	this._webRoot=webRoot;	this._routeMaps=routeMaps;	this._staticRouteMaps=staticRouteMaps;	this._config=config||{};	for(var k in serverDefaultConfig){		if(!this._config[k])			this._config[k]=serverDefaultConfig[k];	}};util.inherits(Server, EventEmitter);Server.prototype.createServer=function () {	var self=this;    var httpServer=http.createServer(function (request,response) {				var buffers = [], size = 0;            request.on("data",function (buffer) {                 buffers.push(buffer);                 size += buffer.length;            }).on("end",function () {                var buffer = new Buffer(size), pos = 0;                for(var i = 0, l = buffers.length; i < l; i++) {                    buffers[i].copy(buffer, pos);                    pos += buffers[i].length;                }				                self.doHandle(request,response,buffer);                self.on("exit",function(){                    console.log("end");                    response.end();                });            });    });    httpServer.listen(this._port,this._host);    return httpServer;};Server.prototype.doHandle=function (request,response,data){    var staticRouteMaps=this._staticRouteMaps;    var webRoot=this._webRoot;    var requestUrl=decodeURIComponent(request.url);    var pathname = url.parse(requestUrl).pathname;    //check static route map    if(staticRouteMaps){        var realPath=getRealPathFromRouteMap(pathname,staticRouteMaps);        if(realPath){            console.log(request.method+" "+requestUrl +"("+pathname+","+realPath+")");            this.handlePath(request,response,realPath,pathname,data);            return ;        }    }    //check static file    realPath=path.join(webRoot,pathname);    console.log(request.method+" "+requestUrl +"("+pathname+","+realPath+")");    this.handlePath(request,response,realPath,pathname,data);};Server.prototype.handlePath=function (request,response,realPath,pathname,data){    var self=this;    realPath=path.normalize(realPath);    console.log("handlePath:"+realPath);    fs.exists(realPath,function (exists) {        console.log(realPath+" exists:"+exists);        if(exists){            self.handleStatic(request,response,realPath);        }else{            self.handleDymatic(request,response,pathname,data);        }    });};Server.prototype.handleStatic=function (request,response,realPath){    var self=this;    console.log("handleStatic:"+realPath);	//file or dir    fs.stat(realPath,function (err,stats) {         if(err){             response.writeHead(500,{"Content-type":"text/plain"});             response.end();         }else{             if(stats.isFile()){                 self.responseFile(request,response,realPath);             }else if(stats.isDirectory()){                self.listDir(request,response,realPath);             }         }    });};//for instanceServer.prototype.handleDymatic2=function (request,response,pathname,data){    if(!this._routeMaps) return ;    console.log("handleDymatic:"+pathname+",with routeMaps",!!this._routeMaps);    var action=this._routeMaps[request.method] && this._routeMaps[request.method][pathname] || this._routeMaps[pathname];	var context={		data:data	};    var args=[request,response,context,this.afterAction.bind(this,request,response)];    if(action){        action.args=action.args?args.concat(action.args):args;        action.context=action.context||this;        this.beforeAction(request,response);        action.action.apply(action.context,action.args);		if(context.nextActionExecuted){			this.afterAction(request,response);		}    }else{        response.writeHead(404,{"Content-type":"text/plain"});        response.write("The request url "+request.url+" not found!");        response.end();    }};//for methodServer.prototype.handleDymatic=function (request,response,pathname,data){    if(!this._routeMaps) return ;    console.log("handleDymatic:"+pathname+",with routeMaps",!!this._routeMaps);    var action=this._routeMaps[request.method] && this._routeMaps[request.method][pathname] || this._routeMaps[pathname];    var args=[request,response,this.afterAction.bind(this,request,response),data];    if(action){        action.args=action.args?args.concat(action.args):args;        action.context=action.context||this;        this.beforeAction(request,response);		//是否在action里执行callback		if(!action.action.apply(action.context,action.args)){			this.afterAction(request,response);		}    }else{        response.writeHead(404,{"Content-type":"text/plain"});        response.write("The request url "+request.url+" not found!");        response.end();    }};Server.prototype.beforeAction=function(request,response){    response.statusCode = 200;    response.setHeader("Content-Type", this._config.ContentType);};Server.prototype.afterAction=function(request,response){    response.end();};Server.prototype.responseFile=function (request,response,realPath){    var self=this;    console.log("responseFile:"+realPath);    fs.readFile(realPath,"binary",function (err,file) {        if(err){            response.writeHead(500,{"Content-type":"text/plain"});            response.end();        }else{            var ext=path.extname(realPath);            var contentType=mine.lookupExtension(ext);            response.writeHead(200,{"Content-type":contentType});            response.write(file,"binary");            response.end();        }    });};Server.prototype.listDir=function (request,response,realPath) {    console.log("listDir:"+realPath);    fs.readdir(realPath,function (err,files) {        if(err){            response.writeHead(500,{"Content-type":"text/plain"});            response.end();        }else{            html='<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/></head><body>';            html+="<ul><li><a href='./'>.</a></li><li><a href='../'>..</a></li>";            for(var i in files){                var filePath=path.join(realPath,files[i]);                var fileStats=fs.statSync(filePath);                if(fileStats.isFile()){                    html+="<li><a href='"+files[i]+"'>"+files[i]+"</a></li>";                }else{                    html+="<li><a href='"+files[i]+"/'>"+files[i]+"</a></li>";                }            }            html+="</ul></body></html>";            response.writeHead(200,{"Content-type":"text/html"});            response.write(html);            response.end();        }    });};Server.createServerWithConfig=function(config){    var routeMaps={};    for(var path in config.routeMaps){        if(typeof config.routeMaps[path]=="function"){            routeMaps={                action:config.routeMaps[path]            };        }else{            routeMaps[path]=config.routeMaps[path];        }    }    var server=new Server(config.port,config.host,config.root,routeMaps,config.staticMaps,config.serverConfig);    return server.createServer();};function doGet(request,response) {     console.log("query string");     var qs=require("url").parse(req.url,true);     for(var i in qs.query){        console.log(i+":"+qs.query[i]);     }}function doPost(request,response,data) {	console.log("post:",data.toString());     // var ps=require("querystring").parse(data.toString());     // for(var i in ps){     //    console.log(i+":"+ps[i]);     // }}function getRealPathFromRouteMap(pathname,routeMaps){	var realPath=routeMaps[pathname];	//查找路径映射	if(!realPath){		var paths=pathname.split("/"),dirname,dirMapName;		for(var i=1;i<paths.length;i++){			dirname=paths.slice(0,i).join("/");			dirMapName=routeMaps[dirname];			if(dirMapName){				realPath=pathname.replace(dirname,dirMapName);				break;			}		}	}		return realPath;}exports.Server=Server;